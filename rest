2. 
Compiler

A compiler is a computer program that translates code written in one programming language (the source language) into another programming language (the target language). The target language is often a machine code or assembly language, which can be executed directly by the computer's CPU.

Source code

Source code is the human-readable code that is written by a programmer in a programming language. It is the code that is compiled into object code or machine code.

Object code

Object code is the machine-readable code that is generated by the compiler. It is specific to the target platform and operating system. Object code files are typically stored in a binary file format.

Linker

A linker is a computer program that combines multiple object code files and library files to create an executable program. The linker resolves all of the symbols and addresses in the object code files and libraries, and it generates a single executable file that can be run directly by the computer's CPU.


3. CODE FOR COMPILLATION PROCESS 
#include <stdio.h>

int main() {
    int num1 = 7;
    int num2 = 12;
    int sum = num1 + num2;

    printf("The sum is: %d\n", sum);

    return 0;
}

i)Preprocessing:
The preprocessor processes directives starting with #, such as #include. In this case, it includes the contents of the stdio.h header file.
ii)Compilation:
The compiler takes the preprocessed code and translates it into assembly code.The output is typically a file with a .o (object) extension.
iii)Linking:
The linker combines the object file with the necessary system libraries to produce an executable file.
It resolves references to functions like printf
iv)Loading:
The loader loads the executable file into memory so that it can be executed by the operating system.
4. 
Characteristic	Compiler	Interpreter
Translation process	Translates the entire source code into machine code before the program runs.	Translates the source code line-by-line as the program runs.
Intermediate code	Generates object code, which is a machine-readable intermediate code.	Does not generate intermediate code.
Execution	The compiled program can be executed directly by the computer's CPU.	The interpreted program needs the interpreter to be present in memory while the program is running.
Speed	Compiled programs are typically faster than interpreted programs because the compiler can optimize the code and generate machine code that is specifically tailored to the target platform.	Interpreted programs are typically slower than compiled programs because the interpreter has to translate the source code on the fly.
Debugging	Debugging compiled programs can be more difficult because the compiler can introduce errors during the translation process.	Debugging interpreted programs is typically easier because the interpreter can display errors in the source code as the program is running.
Portability	Compiled programs are more portable than interpreted programs because they are machine code and can be executed on any platform that has a compatible CPU.	Interpreted programs are less portable because they need the interpreter to be present on the platform where the program is running.
5.Arithmetic operators:+,=-
Relational operators :(==)
Logical operators: &&,||,!
Bitwise operators: & (bitwise and)
Assignment operators
Increment/decrement operators : (++),(--)
Conditional operators: used to evaluate one of two expression based on given conditions (?:
